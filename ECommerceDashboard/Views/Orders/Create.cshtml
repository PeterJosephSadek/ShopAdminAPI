@model ECommerceDashboard.Models.ViewModels.CreateOrderViewModel

@{
    ViewData["Title"] = "Create Order";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <style>
        .product-table th, .product-table td {
            vertical-align: middle;
        }

        .search-container {
            margin-bottom: 20px;
        }

        .total-price {
            font-weight: bold;
            font-size: 1.2em;
            color: #28a745;
        }

        .order-items-table {
            margin-top: 20px;
        }

        .quantity-input {
            width: 80px;
        }

        .error-message {
            color: red;
            font-size: 0.9em;
        }

        .table-responsive {
            max-height: 400px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1>Create Order</h1>
        <form asp-action="Create" method="post" id="orderForm">
            <div class="row">
                <!-- Customer Information -->
                <div class="col-md-6">
                    <h3>Customer Information</h3>
                    <div class="mb-3">
                        <label asp-for="CustomerName" class="form-label"></label>
                        <input asp-for="CustomerName" class="form-control" />
                        <span asp-validation-for="CustomerName" class="error-message"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="PhoneNumber" class="form-label"></label>
                        <input asp-for="PhoneNumber" class="form-control" />
                        <span asp-validation-for="PhoneNumber" class="error-message"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Address" class="form-label"></label>
                        <input asp-for="Address" class="form-control" />
                        <span asp-validation-for="Address" class="error-message"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="AddressLocation" class="form-label"></label>
                        <input asp-for="AddressLocation" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label asp-for="Comment" class="form-label"></label>
                        <textarea asp-for="Comment" class="form-control" rows="4"></textarea>
                    </div>
                </div>

                <!-- Product Selection -->
                <div class="col-md-6">
                    <h3>Select Products</h3>
                    <div class="search-container">
                        <input type="text" id="productSearch" class="form-control" placeholder="Search products..." />
                    </div>
                    <div class="table-responsive">
                        <table class="table table-striped product-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Price</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="productList">
                                @foreach (var product in Model.AvailableProducts)
                                {
                                    <tr data-product-id="@product.Id" data-product-name="@product.Name" data-product-price="@product.Price">
                                        <td>@product.Name</td>
                                        <td>$@product.Price.ToString("F2")</td>
                                        <td>
                                            <button type="button" class="btn btn-primary btn-sm add-product">Add</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Order Items -->
            <h3 class="mt-4">Order Items</h3>
            <div class="table-responsive">
                <table class="table table-bordered order-items-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="orderItems"></tbody>
                </table>
            </div>
            <input type="hidden" id="orderItemsInput" name="OrderItems" />
            <div class="total-price mt-3">
                Total: $<span id="totalPrice">0.00</span>
            </div>

            <!-- Form Actions -->
            <div class="mt-4">
                <button type="submit" class="btn btn-success">Submit Order</button>
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.validate.unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script>
        $(document).ready(function () {
            let orderItems = [];

            // Product Search (Client-side)
            $('#productSearch').on('input', function () {
                let searchTerm = $(this).val().toLowerCase();
                $('#productList tr').each(function () {
                    let productName = $(this).data('product-name').toLowerCase();
                    $(this).toggle(productName.includes(searchTerm));
                });
            });

            // Add Product to Order
            $('.add-product').click(function () {
                let row = $(this).closest('tr');
                let productId = parseInt(row.data('product-id')); // Ensure database ProductId
                let productName = row.data('product-name');
                let price = parseFloat(row.data('product-price'));

                let existingItem = orderItems.find(item => item.ProductId === productId);
                if (existingItem) {
                    existingItem.Quantity++;
                } else {
                    orderItems.push({
                        ProductId: productId,
                        ProductName: productName,
                        Price: price,
                        Quantity: 1
                    });
                }
                updateOrderItemsTable();
            });

            // Remove Product from Order
            $(document).on('click', '.remove-product', function () {
                let productId = parseInt($(this).data('product-id'));
                orderItems = orderItems.filter(item => item.ProductId !== productId);
                updateOrderItemsTable();
            });

            // Update Quantity
            $(document).on('change', '.quantity-input', function () {
                let productId = parseInt($(this).data('product-id'));
                let quantity = parseInt($(this).val());
                if (isNaN(quantity) || quantity < 0) {
                    quantity = 0;
                    $(this).val(0);
                }
                let item = orderItems.find(item => item.ProductId === productId);
                if (item) {
                    if (quantity === 0) {
                        orderItems = orderItems.filter(i => i.ProductId !== productId);
                    } else {
                        item.Quantity = quantity;
                    }
                    updateOrderItemsTable();
                }
            });

            // Update Order Items Table and Total
            function updateOrderItemsTable() {
                let tbody = $('#orderItems');
                tbody.empty();
                let totalPrice = 0;

                orderItems.forEach(item => {
                    let itemTotal = item.Price * item.Quantity;
                    totalPrice += itemTotal;
                    tbody.append(`
                        <tr>
                            <td>${item.ProductName}</td>
                            <td>$${item.Price.toFixed(2)}</td>
                            <td><input type="number" class="form-control quantity-input" data-product-id="${item.ProductId}" value="${item.Quantity}" min="0"></td>
                            <td>$${itemTotal.toFixed(2)}</td>
                            <td><button type="button" class="btn btn-danger btn-sm remove-product" data-product-id="${item.ProductId}">Remove</button></td>
                        </tr>
                    `);
                });

                $('#totalPrice').text(totalPrice.toFixed(2));
                $('#orderItemsInput').val(JSON.stringify(orderItems));
            }

            // Form Submission
            $('#orderForm').submit(function (e) {
                if (orderItems.length === 0) {
                    e.preventDefault();
                    alert('Please add at least one product to the order.');
                } else {
                    // Ensure OrderItems is serialized correctly
                    $('#orderItemsInput').val(JSON.stringify(orderItems));
                }
            });
        });
    </script>
</body>
</html>